@import_c("Lexer.h");
@import_c("string.h");
@import_c("Token.h");
@import_c("SourceFile.h");
@import_c("fcntl.h");
@import_c("stdio.h");
@import_c("stdlib.h");
@import_c("sys/mman.h");
@import_c("sys/stat.h");
@import_c("unistd.h");
@import_c("Core/MappedFile.h");

inline_c typedef c_string* c_string_array;
pub c_fn main(argc: c_int, argv: c_string_array) -> c_int {
    if argc < 2 {
        let program_name = inline_c argv[0];
        usage(program_name, 1);
    }
    inline_c let source_path_string = argv[1];
    let source_path = StringView {
        .data = source_path_string,
        .size = strlen(source_path_string),
    };

    let mapped_file_or_error = MappedFile$open(source_path);

    if mapped_file_or_error.is_error {
        Error$show(&mapped_file_or_error.error);
        return 1;
    }
    let mapped_file = mapped_file_or_error.value;

    let source_file = SourceFile {
        .name = source_path.data,
        .name_size = source_path.size,
        .text = mapped_file.data,
        .text_size = mapped_file.size,
    };

    var lexer = Lexer {};
    if lexer_init(&mut lexer, source_file) < 0 {
        fprintf(stderr, "could not init lexer\n");
        MappedFile$destroy(&mapped_file);
        return 1;
    }

    if lexer_run(&mut lexer) < 0 {
        fprintf(stderr, "could not run lexer\n");
        lexer_deinit(&mut lexer);
        MappedFile$destroy(&mapped_file);
        return 1;
    }

    lexer_deinit(&mut lexer);
    MappedFile$destroy(&mapped_file);

    return 0;
}

fn usage(program_name: c_string, exit_code: i32) -> void {
    var out = inline_c exit_code ? stderr : stdout;
    fprintf(out, "USAGE: %s file\n", program_name);
    exit(exit_code);
}

